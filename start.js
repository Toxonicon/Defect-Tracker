#!/usr/bin/env node

const { spawn, exec } = require('child_process');
const path = require('path');
const fs = require('fs');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  white: '\x1b[37m'
};

const log = (message, color = colors.white) => {
  console.log(`${color}${message}${colors.reset}`);
};

const projectRoot = __dirname;
const isWindows = process.platform === 'win32';

log('üöÄ –ó–∞–ø—É—Å–∫ Defect Tracker...', colors.green);
log('='.repeat(50), colors.cyan);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–æ–∫
const frontendPath = path.join(projectRoot, 'frontend');
const backendPath = path.join(projectRoot, 'backend');

if (!fs.existsSync(frontendPath)) {
  log('‚ùå –ü–∞–ø–∫–∞ frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', colors.red);
  process.exit(1);
}

if (!fs.existsSync(backendPath)) {
  log('‚ùå –ü–∞–ø–∫–∞ backend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', colors.red);
  process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
const startProcess = (command, args, cwd, name) => {
  log(`üîÑ –ó–∞–ø—É—Å–∫ ${name}...`, colors.blue);
  
  const child = spawn(command, args, {
    cwd,
    stdio: ['inherit', 'pipe', 'pipe'],
    shell: isWindows
  });

  child.stdout.on('data', (data) => {
    process.stdout.write(`[${name}] ${data}`);
  });

  child.stderr.on('data', (data) => {
    process.stderr.write(`[${name}] ${data}`);
  });

  child.on('error', (error) => {
    log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${name}: ${error.message}`, colors.red);
  });

  return child;
};

// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
const killNodeProcesses = () => {
  return new Promise((resolve) => {
    log('üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...', colors.yellow);
    
    const killCommand = isWindows 
      ? 'taskkill /f /im node.exe'
      : 'pkill -f node';
    
    exec(killCommand, (error) => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
      setTimeout(resolve, 2000);
    });
  });
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
const checkService = (url, name) => {
  return new Promise((resolve) => {
    const http = require('http');
    const urlObj = new URL(url);
    
    const req = http.request({
      hostname: urlObj.hostname,
      port: urlObj.port,
      path: urlObj.pathname,
      timeout: 5000
    }, (res) => {
      if (res.statusCode === 200) {
        log(`‚úÖ ${name} —Ä–∞–±–æ—Ç–∞–µ—Ç: ${url}`, colors.green);
        resolve(true);
      } else {
        resolve(false);
      }
    });

    req.on('error', () => resolve(false));
    req.on('timeout', () => {
      req.destroy();
      resolve(false);
    });
    
    req.end();
  });
};

// –û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
const openBrowser = (url) => {
  const command = isWindows ? 'start' : process.platform === 'darwin' ? 'open' : 'xdg-open';
  const args = isWindows ? ['', url] : [url];
  
  spawn(command, args, { shell: true, detached: true });
};

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  try {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    await killNodeProcesses();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫–µ–Ω–¥
    log('üîß –ó–∞–ø—É—Å–∫ Backend (http://localhost:3000)...', colors.green);
    const backendProcess = startProcess('npm', ['run', 'dev'], backendPath, 'Backend');

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 3000));

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    log('üé® –ó–∞–ø—É—Å–∫ Frontend (http://localhost:5173)...', colors.green);
    const frontendProcess = startProcess('npm', ['run', 'dev'], frontendPath, 'Frontend');

    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...', colors.yellow);
    await new Promise(resolve => setTimeout(resolve, 5000));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
    log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...', colors.cyan);
    
    const backendWorking = await checkService('http://localhost:3000/api/health', 'Backend');
    const frontendWorking = await checkService('http://localhost:5173', 'Frontend');

    if (!backendWorking) {
      log('‚ö†Ô∏è  Backend –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...', colors.yellow);
    }
    
    if (!frontendWorking) {
      log('‚ö†Ô∏è  Frontend –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...', colors.yellow);
    }

    console.log('');
    log('üéâ Defect Tracker –∑–∞–ø—É—â–µ–Ω!', colors.green);
    log('='.repeat(50), colors.cyan);
    log('üì± Frontend: http://localhost:5173', colors.blue);
    log('üîß Backend:  http://localhost:3000', colors.blue);
    log('üìã API Docs: http://localhost:3000/api/health', colors.blue);
    console.log('');
    log('üí° –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ:', colors.cyan);
    log('   üìß Email: test@example.com', colors.white);
    log('   üîë Password: password', colors.white);
    console.log('');
    
    log('üåê –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä...', colors.yellow);
    setTimeout(() => openBrowser('http://localhost:5173'), 2000);

    log('‚ú® –ì–æ—Ç–æ–≤–æ! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.', colors.green);
    log('‚ùå –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏', colors.red);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const cleanup = () => {
      log('üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...', colors.yellow);
      
      if (backendProcess && !backendProcess.killed) {
        backendProcess.kill('SIGTERM');
      }
      
      if (frontendProcess && !frontendProcess.killed) {
        frontendProcess.kill('SIGTERM');
      }
      
      setTimeout(() => {
        log('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.', colors.green);
        process.exit(0);
      }, 2000);
    };

    process.on('SIGINT', cleanup);
    process.on('SIGTERM', cleanup);
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, colors.red);
    process.exit(1);
  }
};

main();